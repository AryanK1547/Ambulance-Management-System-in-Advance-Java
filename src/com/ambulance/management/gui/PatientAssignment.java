/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ambulance.management.gui;

import javax.swing.JOptionPane;
// Import statements should be placed here
import com.ambulance.management.gui.PatientSession;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 *
 * @author user
 */
public class PatientAssignment extends javax.swing.JFrame {

    /**
     * Creates new form PatientAssignment
     */
    public PatientAssignment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel21 = new javax.swing.JLabel();
        btnFindAmbulance = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableAvailableAmbulance = new javax.swing.JTable();
        btnBookAmbulance = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel21.setFont(new java.awt.Font("Tw Cen MT", 1, 48)); // NOI18N
        jLabel21.setText("Ambulance Assignment");

        btnFindAmbulance.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnFindAmbulance.setText("Find  Ambulance");
        btnFindAmbulance.setActionCommand("btnRegisterPatient");
        btnFindAmbulance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindAmbulanceActionPerformed(evt);
            }
        });

        jLabel20.setText("Available Ambulance");

        tableAvailableAmbulance.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        tableAvailableAmbulance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Ambulance ID", "Registration Number", "Driver Name", "Type Of Ambulance", "Status", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableAvailableAmbulance);

        btnBookAmbulance.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnBookAmbulance.setText("Book Ambulance");
        btnBookAmbulance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAmbulanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(680, 680, 680)
                        .addComponent(btnFindAmbulance))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(483, 483, 483)
                        .addComponent(jLabel21))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBookAmbulance)
                                .addGap(92, 92, 92))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(379, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel21)
                .addGap(100, 100, 100)
                .addComponent(btnFindAmbulance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBookAmbulance, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookAmbulanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAmbulanceActionPerformed
        bookAmbulance();       
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBookAmbulanceActionPerformed

    private void btnFindAmbulanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindAmbulanceActionPerformed
        // TODO add your handling code here:
        populateAmbulanceTable();
    }//GEN-LAST:event_btnFindAmbulanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientAssignment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookAmbulance;
    private javax.swing.JButton btnFindAmbulance;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableAvailableAmbulance;
    // End of variables declaration//GEN-END:variables

    private void generatePatientReport(int patientId, String selectedAmbulanceId) {            
        String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
            String username = "root";
            String password = "mysql";

            String patientQuery = "SELECT * FROM Patient WHERE patient_id = ?";
            String ambulanceQuery = "SELECT * FROM Ambulance WHERE ambulance_id = ?";

            try (Connection conn = DriverManager.getConnection(url, username, password);
                PreparedStatement patientStmt = conn.prepareStatement(patientQuery);
                PreparedStatement ambulanceStmt = conn.prepareStatement(ambulanceQuery)) {

                // Fetch patient details
                patientStmt.setInt(1, patientId);
                ResultSet patientRs = patientStmt.executeQuery();

                // Fetch ambulance details
                ambulanceStmt.setString(1, selectedAmbulanceId);
                ResultSet ambulanceRs = ambulanceStmt.executeQuery();

                if (patientRs.next() && ambulanceRs.next()) {
                    String patientName = patientRs.getString("name");
                    String patientContact = patientRs.getString("contact_info");
                    String ambulanceType = ambulanceRs.getString("type");
                    String ambulanceLocation = ambulanceRs.getString("location");
                    String ambulanceStatus = ambulanceRs.getString("status");

                    // Format the report
                    String report = "Patient Booking Report\n"
                    + "---------------------------\n"
                    + "Patient Name: " + patientName + "\n"
                    + "Contact Info: " + patientContact + "\n\n"
                    + "Assigned Ambulance Details:\n"
                    + "Ambulance ID: " + selectedAmbulanceId + "\n"
                    + "Type: " + ambulanceType + "\n"
                    + "Location: " + ambulanceLocation + "\n"
                    + "Status: " + ambulanceStatus + "\n";

                    // Display the report
                    JOptionPane.showMessageDialog(this, report);
                } else {
                    JOptionPane.showMessageDialog(this, "Error generating the report. Please try again.");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
}
    private void populateAmbulanceTable() {
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";
    
    String query = "SELECT * FROM Ambulance WHERE status = 'Available'"; // Assuming "Available" is a status.

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {
        
        DefaultTableModel model = (DefaultTableModel) tableAvailableAmbulance.getModel();
        model.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            String ambulanceId = rs.getString("ambulance_id");
            String regNumber = rs.getString("registration_number");
            String driverName = rs.getString("driver_name");
            String type = rs.getString("type");
            String status = rs.getString("status");
            String location = rs.getString("location");

            // Add row to the table
            model.addRow(new Object[] { ambulanceId, regNumber, driverName, type, status, location });
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
    }
}
    private void bookAmbulance() {
    // Get the logged-in patient details
    int patientId = PatientSession.getInstance().getPatientId();
    if (patientId == -1) {
        JOptionPane.showMessageDialog(this, "Patient not logged in. Please log in first.");
        return;
    }

    // Retrieve the selected ambulance ID from the JTable
    int selectedRow = tableAvailableAmbulance.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an ambulance.");
        return;
    }

    String selectedAmbulanceId = (String) tableAvailableAmbulance.getValueAt(selectedRow, 0); // Column 0 holds the ambulance ID
    if (selectedAmbulanceId == null || selectedAmbulanceId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No ambulance selected.");
        return;
    }

    // Define the database connection details
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";

    // SQL query to insert into AmbulanceAssignment table
    String assignQuery = "INSERT INTO AmbulanceAssignment (patient_id, ambulance_id, status) VALUES (?, ?, ?)";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(assignQuery)) {

        // Set parameters
        stmt.setInt(1, patientId);
        stmt.setString(2, selectedAmbulanceId);
        stmt.setString(3, "Assigned"); // Set default status to "Assigned"

        // Execute the update
        int rowsAffected = stmt.executeUpdate();

        // If the insert was successful, show a message and update the status
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Ambulance successfully assigned!");

            // Optionally, update the ambulance status in the Ambulance table
            updateAmbulanceStatus(selectedAmbulanceId);

            // Generate the patient report if necessary
            generatePatientReport(patientId, selectedAmbulanceId);

        } else {
            JOptionPane.showMessageDialog(this, "Failed to assign ambulance. Please try again.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
    }
}
    private void updateAmbulanceStatus(String ambulanceId) {
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";

    String updateQuery = "UPDATE Ambulance SET status = 'Assigned' WHERE ambulance_id = ?";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(updateQuery)) {

        stmt.setString(1, ambulanceId);
        stmt.executeUpdate(); // Update the status of the ambulance to 'Assigned'

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating ambulance status: " + e.getMessage());
    }
}
}
