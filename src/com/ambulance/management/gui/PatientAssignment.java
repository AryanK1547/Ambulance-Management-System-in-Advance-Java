/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ambulance.management.gui;

import javax.swing.JOptionPane;
// Import statements should be placed here
import com.ambulance.management.gui.PatientSession;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Insets;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;


/**
 *
 * @author user
 */
public class PatientAssignment extends javax.swing.JFrame {

    /**
     * Creates new form PatientAssignment
     */
    public PatientAssignment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel21 = new javax.swing.JLabel();
        btnFindAmbulance = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableAvailableAmbulance = new javax.swing.JTable();
        btnBookAmbulance = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel21.setFont(new java.awt.Font("Tw Cen MT", 1, 48)); // NOI18N
        jLabel21.setText("Ambulance Assignment");

        btnFindAmbulance.setBackground(new java.awt.Color(0, 153, 153));
        btnFindAmbulance.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnFindAmbulance.setForeground(new java.awt.Color(255, 255, 255));
        btnFindAmbulance.setText("Find  Ambulance");
        btnFindAmbulance.setActionCommand("btnRegisterPatient");
        btnFindAmbulance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindAmbulanceActionPerformed(evt);
            }
        });

        jLabel20.setText("Available Ambulance");

        tableAvailableAmbulance.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        tableAvailableAmbulance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Ambulance ID", "Registration Number", "Driver Name", "Type Of Ambulance", "Status", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableAvailableAmbulance);

        btnBookAmbulance.setBackground(new java.awt.Color(204, 204, 0));
        btnBookAmbulance.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnBookAmbulance.setForeground(new java.awt.Color(255, 255, 255));
        btnBookAmbulance.setText("Book Ambulance");
        btnBookAmbulance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAmbulanceActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 51, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(206, 206, 206)
                        .addComponent(jLabel21))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(426, 426, 426)
                        .addComponent(btnFindAmbulance, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(451, 451, 451)
                        .addComponent(btnBookAmbulance, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 957, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(460, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(btnFindAmbulance, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(btnBookAmbulance, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookAmbulanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAmbulanceActionPerformed
        bookAmbulance();       
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBookAmbulanceActionPerformed

    private void btnFindAmbulanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindAmbulanceActionPerformed
        // TODO add your handling code here:
        populateAmbulanceTable();
    }//GEN-LAST:event_btnFindAmbulanceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         MainDashboardForm mdb=new MainDashboardForm();
         this.dispose();
        mdb.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientAssignment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookAmbulance;
    private javax.swing.JButton btnFindAmbulance;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableAvailableAmbulance;
    // End of variables declaration//GEN-END:variables

    private void generatePatientReport(int patientId, String selectedAmbulanceId) {
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";

    String patientQuery = "SELECT * FROM Patient WHERE patient_id = ?";
    String ambulanceQuery = "SELECT * FROM Ambulance WHERE ambulance_id = ?";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement patientStmt = conn.prepareStatement(patientQuery);
         PreparedStatement ambulanceStmt = conn.prepareStatement(ambulanceQuery)) {

        // Fetch patient details
        patientStmt.setInt(1, patientId);
        ResultSet patientRs = patientStmt.executeQuery();

        // Fetch ambulance details
        ambulanceStmt.setString(1, selectedAmbulanceId);
        ResultSet ambulanceRs = ambulanceStmt.executeQuery();

        if (patientRs.next() && ambulanceRs.next()) {
            String patientName = patientRs.getString("name");
            String patientContact = patientRs.getString("contact_info");
            String patientAddress = patientRs.getString("address");
            String ambulanceType = ambulanceRs.getString("type");
            String ambulanceLocation = ambulanceRs.getString("location");
            String ambulanceStatus = ambulanceRs.getString("status");

            // Format the report
            String report = String.format(
                """
                ----------------------------------------------------------------
                                       AMBULANCE BOOKING INVOICE
                ----------------------------------------------------------------
                Booking Date: %s
                
                Patient Details:
                ----------------------------------------------------------------
                Name          : %s
                Contact       : %s
                Address       : %s
                
                Ambulance Details:
                ----------------------------------------------------------------
                Ambulance ID  : %s
                Type          : %s
                Base Location : %s
                Current Status: %s
                
                ----------------------------------------------------------------
                Thank you for choosing our service. Stay safe and healthy!
                ----------------------------------------------------------------
                """,
                new java.util.Date(),  // Booking date
                patientName,
                patientContact,
                patientAddress,
                selectedAmbulanceId,
                ambulanceType,
                ambulanceLocation,
                ambulanceStatus
            );

            // Display the report in a separate window with print functionality
            showReportDialog(report);
        } else {
            JOptionPane.showMessageDialog(this, "Error generating the report. Please try again.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}

    private void showReportDialog(String report) {
    // Create a JDialog
    JDialog reportDialog = new JDialog((Frame) null, "Patient Booking Report", true);
    reportDialog.setSize(500, 400);
    reportDialog.setLocationRelativeTo(null);
    reportDialog.setLayout(new BorderLayout());

    // Create a JTextArea to display the report
    JTextArea textArea = new JTextArea(report);
    textArea.setEditable(false);
    textArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
    textArea.setMargin(new Insets(10, 10, 10, 10));

    // Add the JTextArea to a JScrollPane for scrolling
    JScrollPane scrollPane = new JScrollPane(textArea);
    reportDialog.add(scrollPane, BorderLayout.CENTER);

    // Add a print button
    JButton printButton = new JButton("Print");
    printButton.addActionListener(e -> printReport(textArea.getText()));

    // Add the print button at the bottom of the dialog
    JPanel buttonPanel = new JPanel();
    buttonPanel.add(printButton);
    reportDialog.add(buttonPanel, BorderLayout.SOUTH);

    // Show the dialog
    reportDialog.setVisible(true);
}
    private void printReport(String reportText) {
    try {
        // Use the built-in printing API
        JTextArea printArea = new JTextArea(reportText);
        boolean complete = printArea.print();
        if (complete) {
            JOptionPane.showMessageDialog(null, "Report printed successfully.");
        } else {
            JOptionPane.showMessageDialog(null, "Printing was cancelled.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error during printing: " + e.getMessage());
    }
}



    private void populateAmbulanceTable() {
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";
    
    String query = "SELECT * FROM Ambulance WHERE status = 'Available'"; // Assuming "Available" is a status.

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {
        
        DefaultTableModel model = (DefaultTableModel) tableAvailableAmbulance.getModel();
        model.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            String ambulanceId = rs.getString("ambulance_id");
            String regNumber = rs.getString("registration_number");
            String driverName = rs.getString("driver_name");
            String type = rs.getString("type");
            String status = rs.getString("status");
            String location = rs.getString("location");

            // Add row to the table
            model.addRow(new Object[] { ambulanceId, regNumber, driverName, type, status, location });
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
    }
}
    private void bookAmbulance() {
    // Get the logged-in patient details
    int patientId = PatientSession.getInstance().getPatientId();
    if (patientId == -1) {
        JOptionPane.showMessageDialog(this, "Patient not logged in. Please log in first.");
        return;
    }

    // Retrieve the selected ambulance ID from the JTable
    int selectedRow = tableAvailableAmbulance.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an ambulance.");
        return;
    }

    String selectedAmbulanceId = (String) tableAvailableAmbulance.getValueAt(selectedRow, 0); // Column 0 holds the ambulance ID
    if (selectedAmbulanceId == null || selectedAmbulanceId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No ambulance selected.");
        return;
    }

    // Define the database connection details
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";

    // SQL query to insert into AmbulanceAssignment table
    String assignQuery = "INSERT INTO AmbulanceAssignment (patient_id, ambulance_id, status) VALUES (?, ?, ?)";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(assignQuery)) {

        // Set parameters
        stmt.setInt(1, patientId);
        stmt.setString(2, selectedAmbulanceId);
        stmt.setString(3, "Assigned"); // Set default status to "Assigned"

        // Execute the update
        int rowsAffected = stmt.executeUpdate();

        // If the insert was successful, show a message and update the status
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Ambulance successfully assigned!");

            // Optionally, update the ambulance status in the Ambulance table
            updateAmbulanceStatus(selectedAmbulanceId);

            // Generate the patient report if necessary
            generatePatientReport(patientId, selectedAmbulanceId);

        } else {
            JOptionPane.showMessageDialog(this, "Failed to assign ambulance. Please try again.");
        }

    } catch (SQLException e) {
        System.out.println("Patient ID: " + patientId);
        System.out.println("Ambulance ID: " + selectedAmbulanceId);

        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
    }
}
    private void updateAmbulanceStatus(String ambulanceId) {
    String url = "jdbc:mysql://localhost:3306/AmbulanceManagementSystem";
    String username = "root";
    String password = "mysql";

    String updateQuery = "UPDATE Ambulance SET status = 'Assigned' WHERE ambulance_id = ?";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(updateQuery)) {

        stmt.setString(1, ambulanceId);
        stmt.executeUpdate(); // Update the status of the ambulance to 'Assigned'

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating ambulance status: " + e.getMessage());
    }
}
}
